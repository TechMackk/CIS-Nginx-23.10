################################################################################
# File: roles/rhel_hardening/tasks/system_maintenance.yml
# Purpose: CIS Section 6 - System maintenance and file permissions
# Author: DevOps Automation Team
# Last Updated: October 22, 2025
################################################################################

---
# CIS Section 6 - System Maintenance

- name: "CIS 6.1.x | System File Permissions"
  block:
    - name: "CIS 6.1.2-9 | Set permissions on critical system files"
      file:
        path: "{{ item.path }}"
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      loop: "{{ critical_files }}"
      when: set_file_permissions | bool

    - name: "CIS 6.1.10 | Ensure no world writable files exist"
      shell: |
        df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type f -perm -0002 -ls
      register: world_writable_files
      changed_when: false
      failed_when: world_writable_files.stdout | length > 0
      when: strict_cis_mode | bool

    - name: "CIS 6.1.11 | Ensure no unowned files or directories exist"
      shell: |
        df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -nouser -ls
      register: unowned_files
      changed_when: false
      failed_when: unowned_files.stdout | length > 0 and strict_cis_mode | bool

    - name: "CIS 6.1.12 | Ensure no ungrouped files or directories exist"
      shell: |
        df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -nogroup -ls
      register: ungrouped_files
      changed_when: false
      failed_when: ungrouped_files.stdout | length > 0 and strict_cis_mode | bool
  when: set_file_permissions | bool
  tags:
    - cis_6.1
    - system_maintenance
    - file_permissions

- name: "CIS 6.2.x | User and Group Settings"
  block:
    - name: "CIS 6.2.1 | Ensure password fields are not empty"
      shell: |
        awk -F: '($2 == "") { print $1 }' /etc/shadow
      register: empty_passwords
      changed_when: false
      failed_when: empty_passwords.stdout | length > 0

    - name: "CIS 6.2.2 | Ensure no legacy '+' entries exist in /etc/passwd"
      lineinfile:
        path: /etc/passwd
        regexp: '^\+:'
        state: absent

    - name: "CIS 6.2.3 | Ensure no legacy '+' entries exist in /etc/shadow"
      lineinfile:
        path: /etc/shadow
        regexp: '^\+:'
        state: absent

    - name: "CIS 6.2.4 | Ensure no legacy '+' entries exist in /etc/group"
      lineinfile:
        path: /etc/group
        regexp: '^\+:'
        state: absent

    - name: "CIS 6.2.5 | Ensure root is the only UID 0 account"
      shell: |
        awk -F: '($3 == 0 && $1 != "root") { print $1 }' /etc/passwd
      register: uid_zero_accounts
      changed_when: false
      failed_when: uid_zero_accounts.stdout | length > 0

    - name: "CIS 6.2.6 | Ensure root PATH integrity"
      shell: |
        if echo "$PATH" | grep -q "::"; then
          echo "ERROR: Empty directory in PATH"
          exit 1
        fi
        if echo "$PATH" | grep -q ":$"; then
          echo "ERROR: Trailing : in PATH"
          exit 1
        fi
        for dir in $(echo "$PATH" | tr ':' ' '); do
          if [ "$dir" = "." ]; then
            echo "ERROR: Current directory (.) in PATH"
            exit 1
          fi
        done
      register: root_path_check
      changed_when: false
      failed_when: root_path_check.rc != 0
      become_user: root

    - name: "CIS 6.2.7 | Ensure all users' home directories exist"
      shell: |
        awk -F: '($3>=1000 && $3<65534) {print $1":"$6}' /etc/passwd | while IFS=: read user home; do
          if [ ! -d "$home" ]; then
            echo "User $user home directory $home does not exist"
          fi
        done
      register: missing_home_dirs
      changed_when: false
      failed_when: missing_home_dirs.stdout | length > 0 and strict_cis_mode | bool

    - name: "CIS 6.2.8 | Ensure users' home directories permissions are 750 or more restrictive"
      shell: |
        awk -F: '($3>=1000 && $3<65534) {print $6}' /etc/passwd | while read home; do
          if [ -d "$home" ]; then
            chmod 0750 "$home"
          fi
        done
      changed_when: false

    - name: "CIS 6.2.9 | Ensure users own their home directories"
      shell: |
        awk -F: '($3>=1000 && $3<65534) {print $1":"$6}' /etc/passwd | while IFS=: read user home; do
          if [ -d "$home" ]; then
            chown $user:$user "$home"
          fi
        done
      changed_when: false

    - name: "CIS 6.2.10 | Ensure users' dot files are not group or world writable"
      shell: |
        awk -F: '($3>=1000 && $3<65534) {print $6}' /etc/passwd | while read home; do
          if [ -d "$home" ]; then
            find "$home" -maxdepth 1 -name ".*" -type f -exec chmod go-w {} \;
          fi
        done
      changed_when: false
  tags:
    - cis_6.2
    - system_maintenance
    - users

- name: "CIS 6.2.11 | Ensure no users have .forward files"
  shell: |
    awk -F: '($3>=1000 && $3<65534) {print $6}' /etc/passwd | while read home; do
      if [ -f "$home/.forward" ]; then
        rm -f "$home/.forward"
      fi
    done
  changed_when: false
  tags:
    - cis_6.2.11
    - system_maintenance

- name: "CIS 6.2.12 | Ensure no users have .netrc files"
  shell: |
    awk -F: '($3>=1000 && $3<65534) {print $6}' /etc/passwd | while read home; do
      if [ -f "$home/.netrc" ]; then
        rm -f "$home/.netrc"
      fi
    done
  changed_when: false
  tags:
    - cis_6.2.12
    - system_maintenance

- name: "CIS 6.2.13 | Ensure no users have .rhosts files"
  shell: |
    awk -F: '($3>=1000 && $3<65534) {print $6}' /etc/passwd | while read home; do
      if [ -f "$home/.rhosts" ]; then
        rm -f "$home/.rhosts"
      fi
    done
  changed_when: false
  tags:
    - cis_6.2.13
    - system_maintenance

- name: "CIS 6.2.14 | Ensure all groups in /etc/passwd exist in /etc/group"
  shell: |
    for group in $(cut -d: -f4 /etc/passwd | sort -u); do
      grep -q "^[^:]*:[^:]*:$group:" /etc/group || echo "Group $group does not exist"
    done
  register: missing_groups
  changed_when: false
  failed_when: missing_groups.stdout | length > 0
  tags:
    - cis_6.2.14
    - system_maintenance

- name: "System Maintenance | Lock system accounts"
  user:
    name: "{{ item }}"
    shell: "{{ system_account_shell }}"
    password_lock: yes
  loop:
    - bin
    - daemon
    - adm
    - lp
    - sync
    - shutdown
    - halt
    - mail
    - operator
    - games
    - ftp
  when:
    - lock_system_accounts | bool
    - item in ansible_facts.getent_passwd
  ignore_errors: yes
  tags:
    - system_maintenance
    - users

################################################################################
# END OF FILE: roles/rhel_hardening/tasks/system_maintenance.yml
################################################################################